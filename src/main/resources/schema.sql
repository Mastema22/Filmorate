--Удаление таблиц, если они были до
DROP TABLE IF EXISTS users, friends, films, genres, film_genres, mpa_rates, likes;

--Создание основных таблиц
CREATE TABLE users (
    user_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email varchar(64),
    login varchar(20),
    user_name varchar,
    birthday date
);

CREATE TABLE IF NOT EXISTS friends (
	user_id INTEGER NOT NULL REFERENCES users(user_id) ON UPDATE CASCADE,
	friend_id INTEGER NOT NULL REFERENCES users(user_id) ON UPDATE CASCADE,
	isAccepted BOOLEAN,
	PRIMARY KEY (user_id, friend_id)
);

CREATE TABLE IF NOT EXISTS mpa_rates (
	rate_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	rate VARCHAR(6),
	description VARCHAR(200)
);

CREATE TABLE IF NOT EXISTS films (
    film_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name VARCHAR(64) NOT NULL,
	description VARCHAR(200),
	release_date DATE,
	duration INTEGER,
	likes INTEGER,
	rate INTEGER,
	mpa_rate_id INTEGER REFERENCES mpa_rates(rate_id) ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS genres (
	genre_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	genre VARCHAR(32) NOT NULL
);

CREATE TABLE IF NOT EXISTS film_genres (
	film_id INTEGER NOT NULL REFERENCES films(film_id) ON DELETE RESTRICT ON UPDATE CASCADE,
	genre_id INTEGER NOT NULL REFERENCES genres(genre_id) ON DELETE RESTRICT ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS likes (
	film_id INTEGER NOT NULL REFERENCES films(film_id) ON UPDATE CASCADE,
	user_id INTEGER NOT NULL REFERENCES users(user_id) ON UPDATE CASCADE,
	PRIMARY KEY (film_id, user_id)
);